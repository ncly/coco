## define a list for producing a histogram widget
hist.list <- list(
title = "hist()",
help = "hist",
action = list(
beginning = "hist(",
ending = ")"
),
type = "graphic",                      # either text or graphic
variableType = "univariate",           # single variable
arguments = list(
adjustments = list(
breaks= list(
type="gdroplist",
items=c(""Sturges"",""Scott"",""Friedman-Diaconis"")
),
probability = TRUE.list,
include.lowest = TRUE.list,
right = TRUE.list,
shading = list(
density = list(
type="gedit",
text=NULL
),
angle = list(
type="gedit",
coerce.with="as.numeric",
text="45"
)
)
)
)
)
ggenericwidget(hist.list, container=TRUE)
## or to autogenerate one
ggenericwidget("boxplot.default", container=TRUE)
## End(Not run)
install.packages("gWidgets")
## Not run:
## a sample list definition
## Save some typing by defining a list to be used more than once later
TRUE.list <- list(
type = "gradio",
items = c("TRUE","FALSE")
)
## define a list for producing a histogram widget
hist.list <- list(
title = "hist()",
help = "hist",
action = list(
beginning = "hist(",
ending = ")"
),
type = "graphic",                      # either text or graphic
variableType = "univariate",           # single variable
arguments = list(
adjustments = list(
breaks= list(
type="gdroplist",
items=c(""Sturges"",""Scott"",""Friedman-Diaconis"")
),
probability = TRUE.list,
include.lowest = TRUE.list,
right = TRUE.list,
shading = list(
density = list(
type="gedit",
text=NULL
),
angle = list(
type="gedit",
coerce.with="as.numeric",
text="45"
)
)
)
)
)
ggenericwidget(hist.list, container=TRUE)
## or to autogenerate one
ggenericwidget("boxplot.default", container=TRUE)
## End(Not run)
library(gWidgets)
## Not run:
## a sample list definition
## Save some typing by defining a list to be used more than once later
TRUE.list <- list(
type = "gradio",
items = c("TRUE","FALSE")
)
## define a list for producing a histogram widget
hist.list <- list(
title = "hist()",
help = "hist",
action = list(
beginning = "hist(",
ending = ")"
),
type = "graphic",                      # either text or graphic
variableType = "univariate",           # single variable
arguments = list(
adjustments = list(
breaks= list(
type="gdroplist",
items=c(""Sturges"",""Scott"",""Friedman-Diaconis"")
),
probability = TRUE.list,
include.lowest = TRUE.list,
right = TRUE.list,
shading = list(
density = list(
type="gedit",
text=NULL
),
angle = list(
type="gedit",
coerce.with="as.numeric",
text="45"
)
)
)
)
)
ggenericwidget(hist.list, container=TRUE)
## or to autogenerate one
ggenericwidget("boxplot.default", container=TRUE)
## End(Not run)
library(gWidgets)
## Not run:
## a sample list definition
## Save some typing by defining a list to be used more than once later
TRUE.list <- list(
type = "gradio",
items = c("TRUE","FALSE")
)
## define a list for producing a histogram widget
hist.list <- list(
title = "hist()",
help = "hist",
action = list(
beginning = "hist(",
ending = ")"
),
type = "graphic",                      # either text or graphic
variableType = "univariate",           # single variable
arguments = list(
adjustments = list(
breaks= list(
type="gdroplist",
items=c(""Sturges"",""Scott"",""Friedman-Diaconis"")
),
probability = TRUE.list,
include.lowest = TRUE.list,
right = TRUE.list,
shading = list(
density = list(
type="gedit",
text=NULL
),
angle = list(
type="gedit",
coerce.with="as.numeric",
text="45"
)
)
)
)
)
ggenericwidget(hist.list, container=TRUE)
## or to autogenerate one
ggenericwidget("boxplot.default", container=TRUE)
## End(Not run)
install.packages(guiToolkit)
library(gWidgets)
options("guiToolkit"="RGtk2")
f <- function(file, max.rows){
dat <- read.table(file, nrows=max.rows)
return(max(dat[,]))
}
win <- gwindow("Example")
grp.text <- ggroup(horizontal=FALSE, container = win)
lbl.text <- glabel("Maximum Lines: ", container = grp.text)
insert.text <- gedit(-1, container = grp.text)
grp.file <- ggroup(horizontal=FALSE, container = win)
lbl.file <- glabel("File: ", container = grp.file)
browse.file <- gfilebrowse(container = grp.file)
read <- gbutton(text="Go", container = grp.file,
handler = function(h, ...) {
cat(f(svalue(browse.file),
as.numeric(svalue(insert.text))));
}
)
install.packages(gWidgetsRGtk2)
library(gWidgets2)
options("guiToolkit"="RGtk2")
f <- function(file, max.rows){
dat <- read.table(file, nrows=max.rows)
message("Calling max")
print(max(dat[,]))
}
## containers
w <- gwindow("Example", visible=FALSE)
fr <- gframe("Arguments", horizontal=FALSE, cont=w)       # optional frame
fl <- gformlayout(cont=fr)
## widgets
select_file <- gfilebrowse(cont=fl, label="File")
max_rows <- gedit(-1, cont=fl, label="maximum number of rows", coerce.with=as.numeric)
## button
bg <- ggroup(cont=fr)
addSpring(bg)
btn <- gbutton("ok", cont=bg)
addHandlerClicked(btn, function(h,...) {
l <- svalue(fl) ## a named list by the labels,
do.call(f, setNames(l, c("file", "max.rows"))) ## change names for do.call
})
visible(w) <- TRUE
visible(w) <- TRUE
install.packages(gWidgetstcltk2)
install.packages('gWidgetstcltk2)
install.packages('gWidgetstcltk2')
install.packages('gWidgetstcltk')
library(gWidgets2)
options("guiToolkit"="RGtk2")
f <- function(file, max.rows){
dat <- read.table(file, nrows=max.rows)
message("Calling max")
print(max(dat[,]))
}
## containers
w <- gwindow("Example", visible=FALSE)
fr <- gframe("Arguments", horizontal=FALSE, cont=w)       # optional frame
fl <- gformlayout(cont=fr)
## widgets
select_file <- gfilebrowse(cont=fl, label="File")
max_rows <- gedit(-1, cont=fl, label="maximum number of rows", coerce.with=as.numeric)
## button
bg <- ggroup(cont=fr)
addSpring(bg)
btn <- gbutton("ok", cont=bg)
addHandlerClicked(btn, function(h,...) {
l <- svalue(fl) ## a named list by the labels,
do.call(f, setNames(l, c("file", "max.rows"))) ## change names for do.call
})
visible(w) <- TRUE
install.packages('gWidgetsToolkitRGtk2')
install.packages('gWidgetsToolkitRGtk')
## Not run:## a sample list definition## Save some typing by defining a list to be used more than once laterTRUE.list <- list(  type = "gradio",  items = c("TRUE","FALSE"))## define a list for producing a histogram widgethist.list <- list(  title = "hist()",  help = "hist",  action = list(    beginning = "hist(",    ending = ")"  ),  type = "graphic",  variableType = "univariate",  arguments = list(    adjustments = list(            breaks= list(        type="gdroplist",        items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")      ),      probability = TRUE.list,      include.lowest = TRUE.list,      right = TRUE.list,      shading = list(        density = list(          type="gedit",          text=NULL ),        angle = list(          type="gedit",          coerce.with="as.numeric",          text="45"        )      )    ) ))ggenericwidget(hist.list, container=TRUE)## or to autogenerate oneggenericwidget("boxplot.default", container=TRUE)## End(Not run)
## Not run:## a sample list definition## Save some typing by defining a list to be used more than once laterTRUE.list <- list(  type = "gradio",  items = c("TRUE","FALSE"))## define a list for producing a histogram widgethist.list <- list(  title = "hist()",  help = "hist",  action = list(    beginning = "hist(",    ending = ")"  ),  type = "graphic",  variableType = "univariate",  arguments = list(    adjustments = list(            breaks= list(        type="gdroplist",        items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")      ),      probability = TRUE.list,      include.lowest = TRUE.list,      right = TRUE.list,      shading = list(        density = list(          type="gedit",          text=NULL ),        angle = list(          type="gedit",          coerce.with="as.numeric",          text="45"        )      )    ) ))ggenericwidget(hist.list, container=TRUE)## or to autogenerate oneggenericwidget("boxplot.default", container=TRUE)## End(Not run)
## Not run:## a sample list definition## Save some typing by defining a list to be used more than once laterTRUE.list <- list(  type = "gradio",  items = c("TRUE","FALSE"))## define a list for producing a histogram widgethist.list <- list(  title = "hist()",  help = "hist",  action = list(    beginning = "hist(",    ending = ")"  ),  type = "graphic",  variableType = "univariate",  arguments = list(    adjustments = list(            breaks= list(        type="gdroplist",        items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")      ),      probability = TRUE.list,      include.lowest = TRUE.list,      right = TRUE.list,      shading = list(        density = list(          type="gedit",          text=NULL ),        angle = list(          type="gedit",          coerce.with="as.numeric",          text="45"        )      )    ) ))ggenericwidget(hist.list, container=TRUE)## or to autogenerate oneggenericwidget("boxplot.default", container=TRUE)## End(Not run)
## Not run:## a sample list definition## Save some typing by defining a list to be used more than once laterTRUE.list <- list(  type = "gradio",  items = c("TRUE","FALSE"))## define a list for producing a histogram widgethist.list <- list(  title = "hist()",  help = "hist",  action = list(    beginning = "hist(",    ending = ")"  ),  type = "graphic",  variableType = "univariate",  arguments = list(    adjustments = list(            breaks= list(        type="gdroplist",        items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")      ),      probability = TRUE.list,      include.lowest = TRUE.list,      right = TRUE.list,      shading = list(        density = list(          type="gedit",          text=NULL ),        angle = list(          type="gedit",          coerce.with="as.numeric",          text="45"        )      )    ) ))ggenericwidget(hist.list, container=TRUE)## or to autogenerate oneggenericwidget("boxplot.default", container=TRUE)## End(Not run)
## Not run:## a sample list definition## Save some typing by defining a list to be used more than once laterTRUE.list <- list(  type = "gradio",  items = c("TRUE","FALSE"))## define a list for producing a histogram widgethist.list <- list(  title = "hist()",  help = "hist",  action = list(    beginning = "hist(",    ending = ")"  ),  type = "graphic",  variableType = "univariate",  arguments = list(    adjustments = list(            breaks= list(        type="gdroplist",        items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")      ),      probability = TRUE.list,      include.lowest = TRUE.list,      right = TRUE.list,      shading = list(        density = list(          type="gedit",          text=NULL ),        angle = list(          type="gedit",          coerce.with="as.numeric",          text="45"        )      )    ) ))ggenericwidget(hist.list, container=TRUE)## or to autogenerate oneggenericwidget("boxplot.default", container=TRUE)## End(Not run)
## Not run:## a sample list definition## Save some typing by defining a list to be used more than once laterTRUE.list <- list(  type = "gradio",  items = c("TRUE","FALSE"))## define a list for producing a histogram widgethist.list <- list(  title = "hist()",  help = "hist",  action = list(    beginning = "hist(",    ending = ")"  ),  type = "graphic",  variableType = "univariate",  arguments = list(    adjustments = list(            breaks= list(        type="gdroplist",        items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")      ),      probability = TRUE.list,      include.lowest = TRUE.list,      right = TRUE.list,      shading = list(        density = list(          type="gedit",          text=NULL ),        angle = list(          type="gedit",          coerce.with="as.numeric",          text="45"        )      )    ) ))ggenericwidget(hist.list, container=TRUE)## or to autogenerate oneggenericwidget("boxplot.default", container=TRUE)## End(Not run)
## Not run:## a sample list definition## Save some typing by defining a list to be used more than once laterTRUE.list <- list(  type = "gradio",  items = c("TRUE","FALSE"))## define a list for producing a histogram widgethist.list <- list(  title = "hist()",  help = "hist",  action = list(    beginning = "hist(",    ending = ")"  ),  type = "graphic",  variableType = "univariate",  arguments = list(    adjustments = list(            breaks= list(        type="gdroplist",        items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")      ),      probability = TRUE.list,      include.lowest = TRUE.list,      right = TRUE.list,      shading = list(        density = list(          type="gedit",          text=NULL ),        angle = list(          type="gedit",          coerce.with="as.numeric",          text="45"        )      )    ) ))ggenericwidget(hist.list, container=TRUE)## or to autogenerate oneggenericwidget("boxplot.default", container=TRUE)## End(Not run)
## Not run:## a sample list definition## Save some typing by defining a list to be used more than once laterTRUE.list <- list(  type = "gradio",  items = c("TRUE","FALSE"))## define a list for producing a histogram widgethist.list <- list(  title = "hist()",  help = "hist",  action = list(    beginning = "hist(",    ending = ")"  ),  type = "graphic",  variableType = "univariate",  arguments = list(    adjustments = list(            breaks= list(        type="gdroplist",        items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")      ),      probability = TRUE.list,      include.lowest = TRUE.list,      right = TRUE.list,      shading = list(        density = list(          type="gedit",          text=NULL ),        angle = list(          type="gedit",          coerce.with="as.numeric",          text="45"        )      )    ) ))ggenericwidget(hist.list, container=TRUE)## or to autogenerate oneggenericwidget("boxplot.default", container=TRUE)## End(Not run)
## Not run:## a sample list definition## Save some typing by defining a list to be used more than once laterTRUE.list <- list(  type = "gradio",  items = c("TRUE","FALSE"))## define a list for producing a histogram widgethist.list <- list(  title = "hist()",  help = "hist",  action = list(    beginning = "hist(",    ending = ")"  ),  type = "graphic",  variableType = "univariate",  arguments = list(    adjustments = list(            breaks= list(        type="gdroplist",        items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")      ),      probability = TRUE.list,      include.lowest = TRUE.list,      right = TRUE.list,      shading = list(        density = list(          type="gedit",          text=NULL ),        angle = list(          type="gedit",          coerce.with="as.numeric",          text="45"        )      )    ) ))ggenericwidget(hist.list, container=TRUE)## or to autogenerate oneggenericwidget("boxplot.default", container=TRUE)## End(Not run)
## Not run:## a sample list definition## Save some typing by defining a list to be used more than once laterTRUE.list <- list(  type = "gradio",  items = c("TRUE","FALSE"))## define a list for producing a histogram widgethist.list <- list(  title = "hist()",  help = "hist",  action = list(    beginning = "hist(",    ending = ")"  ),  type = "graphic",  variableType = "univariate",  arguments = list(    adjustments = list(            breaks= list(        type="gdroplist",        items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")      ),      probability = TRUE.list,      include.lowest = TRUE.list,      right = TRUE.list,      shading = list(        density = list(          type="gedit",          text=NULL ),        angle = list(          type="gedit",          coerce.with="as.numeric",          text="45"        )      )    ) ))ggenericwidget(hist.list, container=TRUE)## or to autogenerate oneggenericwidget("boxplot.default", container=TRUE)## End(Not run)
ggenericwidget(hist.list, container=TRUE)
ggenericwidget("boxplot.default", container=TRUE)
install.packages(gWidgetsRGtk2)
install.packages('gWidgetsRGtk2')
## Not run:## a sample list definition## Save some typing by defining a list to be used more than once laterTRUE.list <- list(  type = "gradio",  items = c("TRUE","FALSE"))## define a list for producing a histogram widgethist.list <- list(  title = "hist()",  help = "hist",  action = list(    beginning = "hist(",    ending = ")"  ),  type = "graphic",  variableType = "univariate",  arguments = list(    adjustments = list(            breaks= list(        type="gdroplist",        items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")      ),      probability = TRUE.list,      include.lowest = TRUE.list,      right = TRUE.list,      shading = list(        density = list(          type="gedit",          text=NULL ),        angle = list(          type="gedit",          coerce.with="as.numeric",          text="45"        )      )    ) ))ggenericwidget(hist.list, container=TRUE)## or to autogenerate oneggenericwidget("boxplot.default", container=TRUE)## End(Not run)
ggenericwidget("boxplot.default", container=TRUE)
## Not run:## a sample list definition## Save some typing by defining a list to be used more than once laterTRUE.list <- list(  type = "gradio",  items = c("TRUE","FALSE"))## define a list for producing a histogram widgethist.list <- list(  title = "hist()",  help = "hist",  action = list(    beginning = "hist(",    ending = ")"  ),  type = "graphic",  variableType = "univariate",  arguments = list(    adjustments = list(            breaks= list(        type="gdroplist",        items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")      ),      probability = TRUE.list,      include.lowest = TRUE.list,      right = TRUE.list,      shading = list(        density = list(          type="gedit",          text=NULL ),        angle = list(          type="gedit",          coerce.with="as.numeric",          text="45"        )      )    ) ))ggenericwidget(hist.list, container=TRUE)## or to autogenerate oneggenericwidget("boxplot.default", container=TRUE)## End(Not run)
ggenericwidget("boxplot.default", container=TRUE)
## Not run:## a sample list definition## Save some typing by defining a list to be used more than once laterTRUE.list <- list(  type = "gradio",  items = c("TRUE","FALSE"))## define a list for producing a histogram widgethist.list <- list(  title = "hist()",  help = "hist",  action = list(    beginning = "hist(",    ending = ")"  ),  type = "graphic",  variableType = "univariate",  arguments = list(    adjustments = list(            breaks= list(        type="gdroplist",        items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")      ),      probability = TRUE.list,      include.lowest = TRUE.list,      right = TRUE.list,      shading = list(        density = list(          type="gedit",          text=NULL ),        angle = list(          type="gedit",          coerce.with="as.numeric",          text="45"        )      )    ) ))ggenericwidget(hist.list, container=TRUE)## or to autogenerate oneggenericwidget("boxplot.default", container=TRUE)## End(Not run)
ggenericwidget("boxplot.default", container=TRUE)
install.packages('cairoDevice')
install.packages("cairoDevice")
ggenericwidget("boxplot.default", container=TRUE)
## Not run:## a sample list definition## Save some typing by defining a list to be used more than once laterTRUE.list <- list(  type = "gradio",  items = c("TRUE","FALSE"))## define a list for producing a histogram widgethist.list <- list(  title = "hist()",  help = "hist",  action = list(    beginning = "hist(",    ending = ")"  ),  type = "graphic",  variableType = "univariate",  arguments = list(    adjustments = list(            breaks= list(        type="gdroplist",        items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")      ),      probability = TRUE.list,      include.lowest = TRUE.list,      right = TRUE.list,      shading = list(        density = list(          type="gedit",          text=NULL ),        angle = list(          type="gedit",          coerce.with="as.numeric",          text="45"        )      )    ) ))ggenericwidget(hist.list, container=TRUE)## or to autogenerate oneggenericwidget("boxplot.default", container=TRUE)## End(Not run)
ggenericwidget("boxplot.default", container=TRUE)
ggenericwidget("boxplot.default", container=TRUE)
ggenericwidget("boxplot.default", container=TRUE)
ggenericwidget("boxplot.default", container=TRUE)
ggenericwidget("boxplot.default", container=TRUE)
## Not run:## a sample list definition## Save some typing by defining a list to be used more than once laterTRUE.list <- list(  type = "gradio",  items = c("TRUE","FALSE"))## define a list for producing a histogram widgethist.list <- list(  title = "hist()",  help = "hist",  action = list(    beginning = "hist(",    ending = ")"  ),  type = "graphic",  variableType = "univariate",  arguments = list(    adjustments = list(            breaks= list(        type="gdroplist",        items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")      ),      probability = TRUE.list,      include.lowest = TRUE.list,      right = TRUE.list,      shading = list(        density = list(          type="gedit",          text=NULL ),        angle = list(          type="gedit",          coerce.with="as.numeric",          text="45"        )      )    ) ))ggenericwidget(hist.list, container=TRUE)## or to autogenerate oneggenericwidget("boxplot.default", container=TRUE)## End(Not run)
ggenericwidget("boxplot.default", container=TRUE)
ggenericwidget(hist.list, container=TRUE)
ggenericwidget(hist.list, container=TRUE)
ggenericwidget(hist.list, container=TRUE)
ggenericwidget(hist.list, container=TRUE)
ggenericwidget(hist.list, container=TRUE)
ggenericwidget(hist.list, container=TRUE)
library(gWidgets)
library(gWidgetsRGtk2)
## Not run:
## a sample list definition
## Save some typing by defining a list to be used more than once later
TRUE.list <- list(
type = "gradio",
items = c("TRUE","FALSE")
)
## define a list for producing a histogram widget
hist.list <- list(
title = "hist()",
help = "hist",
action = list(
beginning = "hist(",
ending = ")"
),
type = "graphic",
variableType = "univariate",
arguments = list(
adjustments = list(
breaks= list(
type="gdroplist",
items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")
),
probability = TRUE.list,
include.lowest = TRUE.list,
right = TRUE.list,
shading = list(
density = list(
type="gedit",
text=NULL ),
angle = list(
type="gedit",
coerce.with="as.numeric",
text="45"
)
)
) )
)
ggenericwidget(hist.list, container=TRUE)
## or to autogenerate one
ggenericwidget("boxplot.default", container=TRUE)
## End(Not run)
library(gWidgets)
## Not run:
## a sample list definition
## Save some typing by defining a list to be used more than once later
TRUE.list <- list(
type = "gradio",
items = c("TRUE","FALSE")
)
## define a list for producing a histogram widget
hist.list <- list(
title = "hist()",
help = "hist",
action = list(
beginning = "hist(",
ending = ")"
),
type = "graphic",
variableType = "univariate",
arguments = list(
adjustments = list(
breaks= list(
type="gdroplist",
items=c("\"Sturges\"","\"Scott\"","\"Friedman-Diaconis\"")
),
probability = TRUE.list,
include.lowest = TRUE.list,
right = TRUE.list,
shading = list(
density = list(
type="gedit",
text=NULL ),
angle = list(
type="gedit",
coerce.with="as.numeric",
text="45"
)
)
) )
)
ggenericwidget(hist.list, container=TRUE)
## or to autogenerate one
ggenericwidget("boxplot.default", container=TRUE)
## End(Not run)
ggenericwidget(hist.list, container=TRUE)
install.packages('gGWidgetsRGtk2')
install.packages('RGtk2')
install.packages("RGtk2")
install.packages('cairoDevice')
install.packages('gWidgets')
install.packages('gWidgetsRGtk2')
options("guiToolkit"="RGtk2")require(gWidgets)obj=gbutton("Hello world", container = gwindow())
#options("guiToolkit"="RGtk2")require(gWidgets)obj=gbutton("Hello world", container = gwindow())
#options("guiToolkit"="RGtk2")require(gWidgets)obj=gbutton("Hello world", container = gwindow())
#options("guiToolkit"="RGtk2")require(gWidgets)obj=gbutton("Hello world", container = gwindow())
#options("guiToolkit"="RGtk2")require(gWidgets)obj=gbutton("Hello world", container = gwindow())
#options("guiToolkit"="RGtk2")require(gWidgets)obj=gbutton("Hello world", container = gwindow())
#options("guiToolkit"="RGtk2")require(gWidgets)obj=gbutton("Hello world", container = gwindow())
#options("guiToolkit"="RGtk2")require(gWidgets)obj=gbutton("Hello world", container = gwindow())
#options("guiToolkit"="RGtk2")require(gWidgets)obj=gbutton("Hello world", container = gwindow())
#options("guiToolkit"="RGtk2")require(gWidgets)obj=gbutton("Hello world", container = gwindow())
options("guiToolkit"="RGtk2")
require(gWidgets)
obj=gbutton("Hello world", container = gwindow())
options("guiToolkit"="RGtk2")
require(gWidgets)
require(gWidgetsRGtk2)
obj=gbutton("Hello world", container = gwindow())
options("guiToolkit"="RGtk2")
require(gWidgets)
obj=gbutton("Hello world", container = gwindow())
obj=gbutton("Hello world", container = gwindow())
options("guiToolkit"="RGtk2")
require(gWidgets)
obj=gbutton("Hello world", container = gwindow())
require(gWidgets)
obj=gbutton("Hello world", container = gwindow())
options("guiToolkit"="RGtk2")
require(gWidgets)
obj=glabel("Hello world", container = gwindow())
help("write.table")
source('CreditDerivativeApproach.R')
# CoCo price V^cd as function of share price S and volatility sigma
createData_CD_S_sigma <- function(S_min, S_max, sigma_min, sigma_max){
data <- matrix(1, 121, 3)
counter <- 1
for(S_increment in seq(from=S_min, to=S_max, by=((S_max-S_min)/10)))
{
for(sigma_increment in seq(from=sigma_min, to=sigma_max, by=((sigma_max-sigma_min)/10)))
{
data[counter, 1] <- S_increment
data[counter, 2] <- price_coco_cd(t <- 0, T <- 10, S_t <- S_increment, S_star <- 35, C_p <- 65, c_i <- 6, r <- 0.01, N <- 100, q <- 0.02, sigma <- sigma_increment)
data[counter, 3] <- sigma_increment
counter <- counter + 1
}
}
write.table(data, file = "createData_CD_S_sigma.txt", row.names = FALSE, quote=FALSE)
}
# CoCo price V^cd as function of maturity T and risk-free interest rate r
createData_CD_T_r <- function(T_min, T_max, r_min, r_max){
data <- matrix(1, 121, 3)
counter <- 1
for(T_increment in seq(from=T_min, to=T_max, by=((T_max-T_min)/10)))
{
for(r_increment in seq(from=r_min, to=r_max, by=((r_max-r_min)/10)))
{
data[counter, 1] <- T_increment
data[counter, 2] <- price_coco_cd(t <- 0, T <- T_increment, S_t <- 100, S_star <- 35, C_p <- 65, c_i <- 6, r <- r_increment, N <- 100, q <- 0.02, sigma <- 0.3)
data[counter, 3] <- r_increment
counter <- counter + 1
}
}
write.table(data, file = "createData_CD_T_r.txt", row.names = FALSE, quote=FALSE)
}
# CoCo price V^cd as function of trigger price S^* and conversion price C_p
createData_CD_Sstar_Cp <- function(S_star_min, S_star_max, C_p_min, C_p_max){
data <- matrix(1, 121, 3)
counter <- 1
for(S_star_increment in seq(from=S_star_min, to=S_star_max, by=((S_star_max-S_star_min)/10)))
{
for(C_p_increment in seq(from=C_p_min, to=C_p_max, by=((C_p_max-C_p_min)/10)))
{
data[counter, 1] <- S_star_increment
data[counter, 2] <- price_coco_cd(t <- 0, T <- 10, S_t <- 100, S_star <- S_star_increment, C_p <- C_p_increment, c_i <- 6, r <- 0.01, N <- 100, q <- 0.02, sigma <- 0.3)
data[counter, 3] <- C_p_increment
counter <- counter + 1
}
}
write.table(data, file = "createData_CD_Sstar_Cp.txt", row.names = FALSE, quote=FALSE)
}
createData_CD_S_sigma(70, 100, 0.1, 0.5)
createData_CD_T_r(1, 50, 0.01, 0.05)
createData_CD_Sstar_Cp(20, 50, 20, 40)
setwd("~/Google Drive/Frankfurt School/Master/Thesis/Latex/text")
source('CreditDerivativeApproach.R')
# CoCo price V^cd as function of share price S and volatility sigma
createData_CD_S_sigma <- function(S_min, S_max, sigma_min, sigma_max){
data <- matrix(1, 121, 3)
counter <- 1
for(S_increment in seq(from=S_min, to=S_max, by=((S_max-S_min)/10)))
{
for(sigma_increment in seq(from=sigma_min, to=sigma_max, by=((sigma_max-sigma_min)/10)))
{
data[counter, 1] <- S_increment
data[counter, 2] <- price_coco_cd(t <- 0, T <- 10, S_t <- S_increment, S_star <- 35, C_p <- 65, c_i <- 6, r <- 0.01, N <- 100, q <- 0.02, sigma <- sigma_increment)
data[counter, 3] <- sigma_increment
counter <- counter + 1
}
}
write.table(data, file = "createData_CD_S_sigma.txt", row.names = FALSE, quote=FALSE)
}
# CoCo price V^cd as function of maturity T and risk-free interest rate r
createData_CD_T_r <- function(T_min, T_max, r_min, r_max){
data <- matrix(1, 121, 3)
counter <- 1
for(T_increment in seq(from=T_min, to=T_max, by=((T_max-T_min)/10)))
{
for(r_increment in seq(from=r_min, to=r_max, by=((r_max-r_min)/10)))
{
data[counter, 1] <- T_increment
data[counter, 2] <- price_coco_cd(t <- 0, T <- T_increment, S_t <- 100, S_star <- 35, C_p <- 65, c_i <- 6, r <- r_increment, N <- 100, q <- 0.02, sigma <- 0.3)
data[counter, 3] <- r_increment
counter <- counter + 1
}
}
write.table(data, file = "createData_CD_T_r.txt", row.names = FALSE, quote=FALSE)
}
# CoCo price V^cd as function of trigger price S^* and conversion price C_p
createData_CD_Sstar_Cp <- function(S_star_min, S_star_max, C_p_min, C_p_max){
data <- matrix(1, 121, 3)
counter <- 1
for(S_star_increment in seq(from=S_star_min, to=S_star_max, by=((S_star_max-S_star_min)/10)))
{
for(C_p_increment in seq(from=C_p_min, to=C_p_max, by=((C_p_max-C_p_min)/10)))
{
data[counter, 1] <- S_star_increment
data[counter, 2] <- price_coco_cd(t <- 0, T <- 10, S_t <- 100, S_star <- S_star_increment, C_p <- C_p_increment, c_i <- 6, r <- 0.01, N <- 100, q <- 0.02, sigma <- 0.3)
data[counter, 3] <- C_p_increment
counter <- counter + 1
}
}
write.table(data, file = "createData_CD_Sstar_Cp.txt", row.names = FALSE, quote=FALSE)
}
createData_CD_S_sigma(70, 100, 0.1, 0.5)
createData_CD_T_r(1, 50, 0.01, 0.05)
createData_CD_Sstar_Cp(20, 50, 20, 40)
